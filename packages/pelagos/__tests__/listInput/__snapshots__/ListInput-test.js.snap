// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ListInput rendering renders expected elements 1`] = `
<div
  className="ListInput"
>
  <div
    aria-live="assertive"
    className="sr-only"
  />
  <LabelLine
    error={false}
    htmlFor="random-id"
    id="random-id-label"
    required={true}
    text="Test"
  />
  <ComboBox
    aria-describedby="random-id-helper"
    aria-required={true}
    autoSelect={true}
    error={false}
    getSuggestions={[Function]}
    id="random-id"
    onChange={[Function]}
    onEnter={[Function]}
    onTextChange={[Function]}
    placeholder="test placeholder"
    text=""
  />
  <FieldHelper
    id="random-id-helper"
    text="Helper text"
  />
  <ListEntries
    className="ListInput__list"
    highlightKey={null}
    id="random-id-grid"
    list={
      [
        {
          "id": "0",
          "name": "test",
        },
      ]
    }
    onHighlightClear={[Function]}
    onRemoveClick={[Function]}
  />
</div>
`;

exports[`ListInput rendering renders expected elements when column is set 1`] = `
<div
  className="ListInput"
>
  <div
    aria-live="assertive"
    className="sr-only"
  />
  <LabelLine
    error={false}
    htmlFor="random-id"
    id="random-id-label"
    text="Test"
  />
  <ComboBox
    aria-describedby="random-id-helper"
    autoSelect={true}
    error={false}
    getSuggestions={[Function]}
    id="random-id"
    onChange={[Function]}
    onEnter={[Function]}
    onTextChange={[Function]}
    placeholder="test placeholder"
    text=""
  />
  <FieldHelper
    id="random-id-helper"
  />
  <ListEntries
    className="ListInput__list"
    column={true}
    highlightKey={null}
    id="random-id-grid"
    list={
      [
        {
          "id": "0",
          "name": "test",
        },
      ]
    }
    onHighlightClear={[Function]}
    onRemoveClick={[Function]}
  />
</div>
`;

exports[`ListInput rendering renders expected elements when error is set 1`] = `
<div
  className="ListInput"
>
  <div
    aria-live="assertive"
    className="sr-only"
  />
  <LabelLine
    error={true}
    htmlFor="random-id"
    id="random-id-label"
    text="Test"
  />
  <ComboBox
    aria-describedby="random-id-error"
    autoSelect={true}
    error={true}
    getSuggestions={[Function]}
    id="random-id"
    onChange={[Function]}
    onEnter={[Function]}
    onTextChange={[Function]}
    placeholder="test placeholder"
    text=""
  />
  <FieldError
    id="random-id-error"
    text="Error"
  />
  <ListEntries
    className="ListInput__list"
    highlightKey={null}
    id="random-id-grid"
    list={
      [
        {
          "id": "0",
          "name": "test",
        },
      ]
    }
    onHighlightClear={[Function]}
    onRemoveClick={[Function]}
  />
</div>
`;

exports[`ListInput rendering renders expected elements when the list is empty 1`] = `
<div
  className="ListInput"
>
  <div
    aria-live="assertive"
    className="sr-only"
  />
  <LabelLine
    error={false}
    htmlFor="random-id"
    id="random-id-label"
    text="Test"
  />
  <ComboBox
    aria-describedby="random-id-helper"
    autoSelect={true}
    error={false}
    getSuggestions={[Function]}
    id="random-id"
    onChange={[Function]}
    onEnter={[Function]}
    onTextChange={[Function]}
    placeholder="test placeholder"
    text=""
  />
  <FieldHelper
    id="random-id-helper"
  />
  <div
    aria-live="polite"
    className="ListInput__empty"
    id="random-id-empty"
  >
    Test empty
  </div>
</div>
`;

exports[`ListInput rendering renders expected elements when className is set 1`] = `
<div
  className="ListInput TestClass"
>
  <div
    aria-live="assertive"
    className="sr-only"
  />
  <LabelLine
    error={false}
    htmlFor="random-id"
    id="random-id-label"
    text="Test"
  />
  <ComboBox
    aria-describedby="random-id-helper"
    autoSelect={true}
    error={false}
    getSuggestions={[Function]}
    id="random-id"
    onChange={[Function]}
    onEnter={[Function]}
    onTextChange={[Function]}
    text=""
  />
  <FieldHelper
    id="random-id-helper"
  />
  <ListEntries
    className="ListInput__list"
    highlightKey={null}
    id="random-id-grid"
    list={
      [
        {
          "id": "0",
          "name": "test",
        },
      ]
    }
    onHighlightClear={[Function]}
    onRemoveClick={[Function]}
  />
</div>
`;
